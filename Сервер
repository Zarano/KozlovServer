#Сервер

Подключает

```
ssh root@  ip
```

Обновляет систему

```
apt update -y
```

Установка git

```
sudo apt install git
```

Установка signoz

```
git clone -b main https://github.com/SigNoz/signoz.git && cd signoz/deploy/
./install.sh
```
Ставит зависимости

```
apt install dpkg-dev build-essential gnupg2 git gcc cmake libpcre3 libpcre3-dev zlib1g zlib1g-dev openssl libssl-dev curl unzip -y
```

Добавляет GPG ключ nginx

```
curl -L https://nginx.org/keys/nginx_signing.key | apt-key add -
```

Добавляет репозитории nginx

```
nano /etc/apt/sources.list.d/nginx.list
```

```
deb http://nginx.org/packages/ubuntu/ focal nginx
deb-src http://nginx.org/packages/ubuntu/ focal nginx
```

Обновляет репозитории

```
apt update -y
```

Скачивает исходники nginx

```
cd /usr/local/src
apt source nginx
```

Ставит зависимости для сборки

```
apt build-dep nginx -y
```

Скачивает Brotli

```
git clone --recursive https://github.com/google/ngx_brotli.git
```

Обновляет правила сборки

```
cd /usr/local/src/nginx-*/
nano debian/rules
```
```export DEB_BUILD_MAINT_OPTIONS=hardening=+all
export DEB_CFLAGS_MAINT_APPEND=-Wp,-D_FORTIFY_SOURCE=2 -fPIC
export DEB_LDFLAGS_MAINT_APPEND=-Wl,--as-needed -pie
DPKG_EXPORT_BUILDFLAGS = 1
include /usr/share/dpkg/buildflags.mk

PKGS = nginx nginx-dbg

BUILDDIR_nginx = $(CURDIR)/debian/build-nginx
BUILDDIR_nginx_debug = $(CURDIR)/debian/build-nginx-debug
INSTALLDIR = $(CURDIR)/debian/nginx
BASEDIR = $(CURDIR)

ifneq (,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))
        NUMJOBS = $(patsubst parallel=%,%,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))
        ifeq (${NUMJOBS}, 0)
                NUMJOBS = 1
        endif
else
        NUMJOBS = 1
endif

DO_PKGS = $(PKGS)

config.env.%:
        dh_testdir
        mkdir -p $(BUILDDIR_$*)
        cp -Pa $(CURDIR)/auto $(BUILDDIR_$*)/
        cp -Pa $(CURDIR)/conf $(BUILDDIR_$*)/
        cp -Pa $(CURDIR)/configure $(BUILDDIR_$*)/
        cp -Pa $(CURDIR)/contrib $(BUILDDIR_$*)/
        cp -Pa $(CURDIR)/man $(BUILDDIR_$*)/
        cp -Pa $(CURDIR)/src $(BUILDDIR_$*)/
        touch $@

config.status.nginx: config.env.nginx
        cd $(BUILDDIR_nginx) && \
        CFLAGS="" ./configure --add-module=/usr/local/src/ngx_brotli --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var>
        touch $@

config.status.nginx_debug: config.env.nginx_debug
        cd $(BUILDDIR_nginx_debug) && \
        CFLAGS="" ./configure --add-module=/usr/local/src/ngx_brotli --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var>
        touch $@

build-arch.%: config.status.%
        dh_testdir
        dh_prep
        $(MAKE) -j$(NUMJOBS) -C $(BUILDDIR_$*) build

build-arch: build-arch.nginx build-arch.nginx_debug
        dh_testdir
        touch $@

build-dbg.%: install
        dh_testdir
        dh_strip --dbg-package=nginx-dbg

build-dbg: build-dbg.nginx
        dh_testdir
        touch $@

build-indep:
        dh_testdir
        touch $@

build: build-arch build-indep
        dh_testdir
        touch $@

clean:
        dh_testdir
        dh_testroot
        dh_clean
        rm -f $(CURDIR)/objs
        rm -rf $(CURDIR)/debian/build-*
        rm -f $(CURDIR)/debian/*.init
        find $(CURDIR) -maxdepth 1 -size 0 -delete

post-build:
        mv $(BUILDDIR_nginx_debug)/objs/nginx $(BUILDDIR_nginx_debug)/objs/nginx-debug
        ln -s $(BUILDDIR_nginx)/objs $(CURDIR)/objs
        cp $(BUILDDIR_nginx)/objs/nginx.8 $(BUILDDIR_nginx)/objs/nginx-debug.8

install:
        dh_testdir
        dh_testroot
        dh_prep
        dh_installdirs
        dh_install
        mkdir -p $(INSTALLDIR)/usr/lib/nginx/modules
        mkdir -p $(INSTALLDIR)/usr/share/doc/nginx
        install -m 644 debian/CHANGES $(INSTALLDIR)/usr/share/doc/nginx/changelog
        install -m 644 debian/nginx.default.conf $(INSTALLDIR)/etc/nginx/conf.d/default.conf
        ln -s /usr/lib/nginx/modules $(INSTALLDIR)/etc/nginx/modules

binary-indep: build post-build install
        dh_testdir
        dh_testroot
        dh_installman -i -pnginx
        dh_installdebconf
        sed -e 's/%%PROVIDES%%/nginx/g' \
                -e 's/%%DEFAULTSTART%%/2 3 4 5/g' \
                -e 's/%%DEFAULTSTOP%%/0 1 6/g' \
                < debian/nginx.init.in > debian/nginx.init
        dh_installinit -i -pnginx --no-stop-on-upgrade --no-start --name=nginx
        dh_installsystemd -i -pnginx --name=nginx nginx.service
        sed -e 's/%%PROVIDES%%/nginx-debug/g' \
                -e 's/%%DEFAULTSTART%%//g' \
                -e 's/%%DEFAULTSTOP%%/0 1 2 3 4 5 6/g' \
                < debian/nginx.init.in > debian/nginx-debug.init
        dh_installinit -i -pnginx --no-stop-on-upgrade --no-start --noscripts --name=nginx-debug
        dh_installsystemd -i -pnginx --name=nginx-debug --no-enable nginx-debug.service
        dh_installlogrotate -i -pnginx --name=nginx

binary-arch: install build-dbg
        dh_testdir
        dh_testroot
        dh_installchangelogs -a
        dh_installdocs -a
        dh_lintian -a
        dh_link -aA
        dh_compress -a
        dh_perl -a
        dh_fixperms -a
        dh_installdeb -a
        dh_shlibdeps -a
        dh_gencontrol -a
        dh_md5sums -a
        dh_builddeb $(foreach p,$(DO_PKGS),-p$(p))

binary: binary-indep binary-arch

.PHONY: build clean binary-indep binary-arch binary install
        
```

Компилирует и собирает nginx

```
dpkg-buildpackage -b -uc -us
```

Проверяет deb-файлы

```
ls /usr/local/src/*.deb
```

Устанавливает nginx из deb-файлов

```
dpkg -i /usr/local/src/*.deb
```

Настраивает nginx

```
nano /etc/nginx/nginx.conf
```

```conf
user www-data;
worker_processes auto;
pid /var/run/nginx.pid;

events {
    worker_connections 768;
}

include /etc/nginx/sites-enabled/*.stream;

http {

    # Basic

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    types_hash_max_size 2048;
    server_tokens off;
    ignore_invalid_headers on;

    # Decrease default timeouts to drop slow clients

    keepalive_timeout 40s;
    send_timeout 20s;
    client_header_timeout 20s;
    client_body_timeout 20s;
    reset_timedout_connection on;

    # Hash sizes

    server_names_hash_bucket_size 64;

    # Mime types

    default_type  application/octet-stream;
    include /etc/nginx/mime.types;

    # Logs

    log_format main '$remote_addr - $remote_user [$time_local] "$request" $status $bytes_sent "$http_referer" "$http_user_agent" "$gzip_ratio"';
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # Limits

    limit_req_zone  $binary_remote_addr  zone=dos_attack:20m   rate=30r/m;

    # Gzip

    gzip on;
    gzip_disable "msie6";
    gzip_vary off;
    gzip_proxied any;
    gzip_comp_level 5;
    gzip_min_length 1000;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types
        application/atom+xml
        application/javascript
        application/json
        application/ld+json
        application/manifest+json
        application/rss+xml
        application/vnd.geo+json
        application/vnd.ms-fontobject
        application/x-font-ttf
        application/x-web-app-manifest+json
        application/xhtml+xml
        application/xml
        font/opentype
        image/bmp
        image/svg+xml
        image/x-icon
        text/cache-manifest
        text/css
        text/plain
        text/vcard
        text/vnd.rim.location.xloc
        text/vtt
        text/x-component
        text/x-cross-domain-policy;

    # Brotli

    brotli on;
    brotli_comp_level 6;
    brotli_types
        text/xml
        image/svg+xml
        application/x-font-ttf
        image/vnd.microsoft.icon
        application/x-font-opentype
        application/json
        font/eot
        application/vnd.ms-fontobject
        application/javascript
        font/otf
        application/xml
        application/xhtml+xml
        text/javascript
        application/x-javascript
        text/$;

    # Virtual Hosts

    include /etc/nginx/sites-enabled/*;

    # Configs

    include /etc/nginx/conf.d/*.conf;
    include /usr/share/nginx/modules/*.conf;

}
```

Проверяет конфиг nginx

```
nginx -t
```

Запускает nginx

```
systemctl start nginx
systemctl status nginx
```

Проверяет Brotli

```
curl -H 'Accept-Encoding: br' -I http://localhost
```

```
Content-Encoding: br
```

Устанавливает файрвол

```
apt install ufw
```

Добавляет nginx

```
nano /etc/ufw/applications.d/nginx.ini
```

```
[Nginx HTTP]
title=Web Server
description=Enable NGINX HTTP traffic
ports=80/tcp

[Nginx HTTPS] \
title=Web Server (HTTPS) \
description=Enable NGINX HTTPS traffic
ports=443/tcp

[Nginx Full]
title=Web Server (HTTP,HTTPS)
description=Enable NGINX HTTP and HTTPS traffic
ports=80,443/tcp
```

Проверяет список приложений

```
ufw app list
```

Включает файрвол

```
ufw enable
```

Разрешает сервисы

```
ufw allow 'Nginx Full'
ufw allow 'OpenSSH'
```

Проверяет статус

```
ufw status

Создаёт папку для сайта

```
mkdir -p /var/www/kozlovmikhail.ru/html
```

Добавляет индексный файл

```
nano /var/www/kozlovmikhail.ru/html/index.html
```

```html
<!DOCTYPE html>
<html lang="ru">
<head>
    <title>Например</title>
    <meta charset="utf-8">
</head>
<body>
    <h1>Например</h1>
</body>
</html>
```

Создаёт папки для конфига

```
mkdir -p /etc/nginx/sites-available/
mkdir -p /etc/nginx/sites-enabled/
```

Правит конфиг

```
nano /etc/nginx/sites-available/kozlovmikhail.ru.conf
```

```
server {
    listen 80;
    listen [::]:80;

    server_name example.com www.example.com;
    root /var/www/example.com/html;
    index index.html index.xml;
}
```

Включает конфиг

```
ln -s /etc/nginx/sites-available/kozlovmikhail.ru.conf /etc/nginx/sites-enabled/
```

Проверяет конфиг

```
nginx -t
```

Рестарт nginx

```
systemctl restart nginx
```

Установка домена 
```
```DNS-сервер
Создаю запить типо А 
TTL 86400
Значение 94.26.237.163 
Название kozlovmikhail.ru
Создаю запись типо NS 
ns1.hosting.reg.ru
ns2.hosting.reg.ru

```
Проверяет домен

```
curl kozlovmikhail.ru
```
Генерирует ключ

```
openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048
```

Создаёт папку для снипетов

```
mkdir -p /etc/nginx/snippets/
```

Создаёт снипет для SSL

```
nano /etc/nginx/snippets/ssl-params.conf
```

```
ssl_session_timeout 1d;
ssl_session_cache shared:SSL:10m;
ssl_session_tickets off;

ssl_dhparam /etc/ssl/certs/dhparam.pem;

ssl_protocols TLSv1.2 TLSv1.3;
ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
ssl_prefer_server_ciphers off;

add_header Strict-Transport-Security "max-age=63072000" always;
```

Обновляет snapd

```
snap install core
```

Устанавливает certbot

```
snap install --classic certbot
```

Проверка certbot

```
ln -s /snap/bin/certbot /usr/bin/certbot
```

Выпускает сертификат

```
certbot certonly --nginx
```

Меняет конфиг веба

```
nano /etc/nginx/sites-available/kozlovmikhail.ru.conf
```

```
server {
    listen 80;
    listen [::]:80;

    server_name example.com www.kozlovmikhail.ru.com;
    return 301 https://kozlovmikhail.ru$request_uri;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    server_name www.kozlovmikhail.ru;
    return 301 https://kozlovmikhail.ru$request_uri;

    ssl_certificate /etc/letsencrypt/live/kozlovmikhail.ru/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/kozlovmikhail.ru/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/kozlovmikhail.ru/chain.pem;

    include snippets/ssl-params.conf;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    server_name kozlovmikhail.ru;
    root /var/www/kozlovmikhail.ru/html;
    index index.html index.xml;

    ssl_certificate /etc/letsencrypt/live/kozlovmikhail.ru/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/kozlovmikhail.ru/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/kozlovmikhail.ru/chain.pem;

    include snippets/ssl-params.conf;
}
```

Проверяет конфиг

```
nginx -t
```

Рестартует nginx

```
systemctl restart nginx
```

Проверяет домен

```
curl https://kozlovmikhail.ru

```
Установка php

```
sudo apt install php8.1-cli

```
Установка composer 

```
php composer-setup.php

```
Делаю composer глобальным

```
mv composer.phar /home/mikhail/composer

```
Установка примера PHP приложения для инструментирования //https://signoz.io/blog/opentelemetry-php/

```
sudo apt-get install autoconf zlib1g-dev php-dev php-pear
sudo pecl install grpc
git clone https://github.com/SigNoz/sample-php-app
~/signoz/sample-php-app/distributed-tracing/src
php src/console-exporter.php

```
Мониторинг PHP-приложение с помощью SigNoz

```



